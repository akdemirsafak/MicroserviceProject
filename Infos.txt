Bölüm 3 : IdentityServer4:
github repo'su üzerinden IdentityServer4.Templates'i cmd kullanarak(proje dizini içerisinde);
	dotnet new -i identityserver4.templates
	dotnet new is4apid --name ProjeAdi 
komutlarını uyguladıktan sonra Solution dosyasında yeni bir Identity Klasörü açıp buraya Existing Project ile ekliyoruz.
Kurulum tamam.Configurations proje içerisinde..

PhotoStock Api ve Catalog Api üyelik sistemine ihtiyaç duymaz.Bu api'lara istek yapılabilmesi için gelen token'da 
	Catalog Api için
	Aud : resource_catalog
	Scope : coursecatalog_fullpermission
	
	PhotoStock.Api için 
	Aud : resource_photo_stock
	Scope : photo_stock_fullpermission
alanlarının bulunması lazım.

** IdentityServer'a Postman ile host:port/.well-known/openid-configuration get req ile endpointleri görüntülüyoruz.
Token endpoint'e body'den x-www-form-urlencoded ile gereken parametreleri(client_id,client_secretve grant_type) göndererek 
bir Client Credential Grant Type token oluşturalım.(Bu token türünü user auth. istemeyen endpointler için kullanıyoruz)
Access Token Bearer type olarak dönecektir. Jwt.io 'dan içeriği kontrol edebiliriz.Bu token default olarak 3600 sec.(1 saat) geçerlidir.

Catalog.API 'ı koruma altına alma:
catalog.api'a jwtbearer paketini dahil ediyoruz.

AccessToken'ın ömrü olabildiğince kısa olmalıdır.Elimizdeki refresh token ile yeniden access token alınabilir.


PhotoStock.API
Statik dosyalarını paylaşamaz oluşturmalıyız ve middleware'i eklememiz lazım

**PhotoStock'da yapılacak işlemler için Client Credential Grant Type yapılandırılması yapıldı!! IdentityServer Config'de Client olarak belirlemiştik.


!Azure Blob Storage dosya kaydetmek için güzel bir servis.Hızlıca download-update işlemi yapmayı sağlar.Bloblara böler ve async şekilde işlemleri gerçekleştirir.
Aws de kullanılabilir dosya işlemleri için cloud kullanmak best practice'dir.



///--- Postman ile testlerin yapılması parametreler ve diğer ayrıntılar ---///
1-) http://localhost:5001/connect/token'a body'den x-www-form-urlencoded'den token alınması.
Resource Owner için :
	client_id=WebMvcClientForUser,
	client_secret=secret,
	grant_type=password,
	username=user2@gmail.com,
	password=Password-1234
Client Credential için :
	client_id=WebMvcClient,
	client_secret=secret,
	grant_type=client_credentials
2-) https://localhost:5001/api/User/Signup Kullanıcı kaydı yapılması (Token ile authorize2.0 kullanılır.)
	{
		Email,UserName,Password,City
	}
3-) http://localhost:5001/api/User/GetUser (Oluşturulan token'ın hangi kullanıcıyı temsil ettiğini görürüz.)
4-) http://localhost:5012/api/photos Post isteği ile CREATE PHOTO Authorize ve body'den form-data seçimi ile key photo(file) value dosya ismi
5-) http://localhost:5012/api/photos Post isteği DELETE PHOTO parametre olarak querystring photoUrl alır.
6-) http://localhost:5011/api/Categories Post isteği ile CREATE CATEGORY json formatında sadece name parametresi alır.
7-) http://localhost:5011/api/Categories GET reqest.Without params will take all categories .
8-) http://localhost:5011/api/Categories GET ById/ querystring'den id parametresi ile getbyId isteği oluşturur.


Basket.API

SharedLibrary'e ISharedIdentityService ekledik ve implementasyonunu yaptık.Buradaki amaç Gelen jwt'deki datayı(userId) okuyabilmek.HttpContext'de bu veriler claim olarak barınmakta.
Ayrıca HttpContext üzerinden req ve res'a erişebiliriz.

Jwt ile yapılan istekte token results view'de nameidentifier userId barındırıyor fakat sub'dan almamız gerekiyor.Burada framework devreye girerek sub'ı nameidentifier claim'ine dönüştürüyor.
Nameidentifier mvc uygulamasında cookie bazlı auth. yaptığımızda userId getirir. Bir karmaşa çıkarmamak için ilgili düzenlemeleri yapacağız.

Discount.API

Projede çeşitlilik olması açısından postgresql/dapper kullanılacak.Bu projede indirim kuponları tutulacak.
Tek bir tablo için bunu kullanmak mantıklı değil.Gerçek hayatta nosql bir db'de tutmak best practice ve mantıklı çözümdür.

Dapper ve Dapper.Contrib arasındaki fark Contrib'in temel crud işlemleri için helper sağlar.
Eğitimi uzatmamak amacıyla Repository katmanını içerisinde olması gerekenleri services içerisinde kullandık.

Discount table oluşturulurken tablo alanları :
		create table Discount
		(
		Id serial primary key,
		userid varchar(100) not null,
		rate smallint not null,
		code varchar(30) not null,
		createdTime timestamp not null default CURRENT_TIMESTAMP
		)


**** Üyelik sistemi gerektiren api'ların Program.cs inde
	var requireAuthorizePolicy = new AuthorizationPolicyBuilder().RequireAuthenticatedUser().Build();
	services.AddControllers(opt=>{
	opt.Filters.Add(new AuthorizeFilter(requireAuthorizePolicy))});
uyguladık. yani client credential olanlarda gerek yok iken Resource owner için gereklidir.!